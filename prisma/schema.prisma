generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  clerkId         String          @unique
  email           String          @unique
  username        String?
  quizzes         Quiz[]          @relation("UserQuizzes")
  sentRequests    FriendRequest[] @relation("SentFriendRequests")
  recvRequests    FriendRequest[] @relation("ReceivedFriendRequests")
  sentInvitations Invitation[]    @relation("SentInvitations")
  recvInvitations Invitation[]    @relation("ReceivedInvitations")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model FriendRequest {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String              @db.ObjectId
  receiverId String              @db.ObjectId
  status     FriendRequestStatus @default(PENDING)
  sender     User                @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([senderId, receiverId])
}

model Invitation {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  invitationId String           @unique
  senderId     String           @db.ObjectId
  receiverId   String           @db.ObjectId
  expiresAt    DateTime
  status       InvitationStatus @default(PENDING)
  sender       User             @relation("SentInvitations", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User             @relation("ReceivedInvitations", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  userId    String     @db.ObjectId
  questions Question[] @relation("QuizQuestions")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserQuizzes")
}

model Question {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  quizId     String     @db.ObjectId
  question   String
  input      String[]
  output     String[]
  difficulty Difficulty
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  quiz       Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade, name: "QuizQuestions")
}
